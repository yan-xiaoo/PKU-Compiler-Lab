use crate::function_ast::*;
use lalrpop_util::ParseError;

grammar;

extern {
    type Error = SysyParseError;
}

match {
  // 跳过空白符和注释
  r"\s*" => {},
  r"//[^\n\r]*[\n\r]*" => {},
  r"/\*[^*]*\*+(?:[^/*][^*]*\*+)*/" => {},
  // 剩下的情况采用默认方式处理
  _
}

pub CompUnit: CompUnit = {
    <func_def: FuncDef> => CompUnit {<>} 
};

FuncDef: FuncDef = {
    <func_type: FuncType> <ident: IDENT> "(" ")" <block: Block> =>? {
        if ident == "main" {
            if func_type == FuncType::Int {
                Ok(FuncDef{ <> })
            } else {
                Err(ParseError::User{
                    error: SysyParseError::InvalidReturnType(ident, func_type.to_string(), "int".to_string())
                })
            }
        } else {
            Ok(FuncDef{ <> })
        }
    }
};

FuncType: FuncType = {
    "int" => FuncType::Int,
    "void" => FuncType::Void,
};

Block: Block = {
    "{" <stmt: Stmt> "}" => Block {<>}
};

Stmt: Stmt = {
    "return" <expr: Exp> ";" => Stmt {<>}
};

Exp: Exp = {
    <l_or_exp: LOrExp> => Exp {<>}
};

LOrExp: LOrExp = {
    <l_and_exp: LAndExp> => LOrExp::LAndExp(<>),
    <l_or_exp: LOrExp> "||" <l_and_exp: LAndExp> => LOrExp::CompoundLOrExp(Box::new(l_or_exp), l_and_exp)
}

LAndExp: LAndExp = {
    <eq_exp: EqExp> => LAndExp::EqExp(<>),
    <l_and_exp: LAndExp> "&&" <eq_exp: EqExp> => LAndExp::CompoundLAndExp(Box::new(l_and_exp), eq_exp)
}

EqExp: EqExp = {
    <rel_exp: RelExp> => EqExp::RelExp(<>),
    <eq_exp: EqExp> "==" <rel_exp: RelExp> => EqExp::CompoundEqExp(Box::new(eq_exp), rel_exp, EqOp::Eq),
    <eq_exp: EqExp> "!=" <rel_exp: RelExp> => EqExp::CompoundEqExp(Box::new(eq_exp), rel_exp, EqOp::Ne)
}

RelExp: RelExp = {
    <add_exp: AddExp> => RelExp::AddExp(<>),
    <rel_exp: RelExp> "<" <add_exp: AddExp> => RelExp::CompoundRelExp(Box::new(rel_exp), add_exp, RelOp::Lt),
    <rel_exp: RelExp> ">" <add_exp: AddExp> => RelExp::CompoundRelExp(Box::new(rel_exp), add_exp, RelOp::Gt),
    <rel_exp: RelExp> "<=" <add_exp: AddExp> => RelExp::CompoundRelExp(Box::new(rel_exp), add_exp, RelOp::Le),
    <rel_exp: RelExp> ">=" <add_exp: AddExp> => RelExp::CompoundRelExp(Box::new(rel_exp), add_exp, RelOp::Ge)
}

AddExp: AddExp = {
    <mul_exp: MulExp> => AddExp::MulExp(<>),
    <add_exp: AddExp> "+" <mul_exp: MulExp> => AddExp::CompoundAddExp(Box::new(add_exp), mul_exp, AddOp::Plus),
    <add_exp: AddExp> "-" <mul_exp: MulExp> => AddExp::CompoundAddExp(Box::new(add_exp), mul_exp, AddOp::Minus)
}

MulExp: MulExp = {
    <unary_exp: UnaryExp> => MulExp::UnaryExp(<>),
    <mul_exp: MulExp> "*" <unary_exp: UnaryExp> => MulExp::CompoundMulExp(Box::new(mul_exp), unary_exp, MulOp::Mul),
    <mul_exp: MulExp> "/" <unary_exp: UnaryExp> => MulExp::CompoundMulExp(Box::new(mul_exp), unary_exp, MulOp::Div),
    <mul_exp: MulExp> "%" <unary_exp: UnaryExp> => MulExp::CompoundMulExp(Box::new(mul_exp), unary_exp, MulOp::Mod)
}

UnaryExp: UnaryExp = {
    <primary_exp: PrimaryExp> => UnaryExp::PrimaryExp(<>),
    <op: UnaryOp> <exp: UnaryExp> => UnaryExp::CompoundUnaryExp(op, Box::new(exp))
}

PrimaryExp: PrimaryExp = {
    "(" <exp: Exp> ")" => PrimaryExp::Exp(Box::new(<>)),
    <number: Number> => PrimaryExp::Number(<>)
}

UnaryOp: UnaryOp = {
    "+" => UnaryOp::Plus,
    "-" => UnaryOp::Minus,
    "!" => UnaryOp::Not
}

Number: i32 = {
    <num: IntConst> => <>
};

IDENT: String = r"[_a-zA-Z][_a-zA-Z0-9]*" => <>.to_string();

IntConst: i32 = {
    r"[1-9][0-9]*" => str::parse(<>).unwrap(),
    r"0[0-7]*" => i32::from_str_radix(<>, 8).unwrap(),
    r"0[xX][0-9a-fA-F]+" => i32::from_str_radix(&<>[2..], 16).unwrap()
};
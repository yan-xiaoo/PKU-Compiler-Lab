use crate::function_ast::*;

grammar;

extern {
    type Error = SysyParseError;
}

match {
  // 跳过空白符和注释
  r"\s*" => {},
  r"//[^\n\r]*[\n\r]*" => {},
  r"/\*[^*]*\*+(?:[^/*][^*]*\*+)*/" => {},
  // 剩下的情况采用默认方式处理
  _
}

pub CompUnit: CompUnit = {
    <func_def: FuncDef> => CompUnit {<>} 
};

FuncDef: FuncDef = {
    <start: @L> <func_type: FuncType> <ident: IDENT> "(" ")" <block: Block> <end: @R> => {
        FuncDef{ func_type, ident, block, span: Span {start, end} }
    }
};

FuncType: FuncType = {
    "int" => FuncType::Int,
    "void" => FuncType::Void,
};

Decl: Decl = {
    <start:@L> <const_decl: ConstDecl> <end:@R>=> Decl {const_decl, span: Span{start, end}}
}

ConstDecl: ConstDecl = {
    "const" <b_type: BType> <mut const_def: (<ConstDef> ",")*> <end: ConstDef?> ";" => match end {
        None => ConstDecl {b_type, const_def},
        Some(end) => {
            const_def.push(end);
            ConstDecl {b_type, const_def}
        }
    }
}

BType: BType = {
    "int" => BType::Int
}

ConstDef: ConstDef = {
    <start: @L> <ident: IDENT> "=" <const_init_val: ConstInitVal> <end: @R> => ConstDef { ident, const_init_val, span: Span {start, end} }
}

ConstInitVal: ConstInitVal = {
    <const_exp: ConstExp> => ConstInitVal { <> }
}

Block: Block = {
    "{" <block_items: (<BlockItem>)*> "}" => Block {<>}
};

BlockItem: BlockItem = {
    <decl: Decl> => BlockItem::Decl(decl),
    <stmt: Stmt> => BlockItem::Stmt(stmt)
}

Stmt: Stmt = {
    <start:@L> "return" <expr: Exp> ";" <end: @R> => Stmt {expr, span: Span{start, end}}
};

ConstExp: ConstExp = {
    <exp: Exp> => ConstExp { <> }
}

Exp: Exp = {
    <l_or_exp: LOrExp> => Exp {<>}
};

LOrExp: LOrExp = {
    <l_and_exp: LAndExp> => LOrExp::LAndExp(<>),
    <l_or_exp: LOrExp> "||" <l_and_exp: LAndExp> => LOrExp::CompoundLOrExp(Box::new(l_or_exp), l_and_exp)
}

LAndExp: LAndExp = {
    <eq_exp: EqExp> => LAndExp::EqExp(<>),
    <l_and_exp: LAndExp> "&&" <eq_exp: EqExp> => LAndExp::CompoundLAndExp(Box::new(l_and_exp), eq_exp)
}

EqExp: EqExp = {
    <rel_exp: RelExp> => EqExp::RelExp(<>),
    <eq_exp: EqExp> "==" <rel_exp: RelExp> => EqExp::CompoundEqExp(Box::new(eq_exp), rel_exp, EqOp::Eq),
    <eq_exp: EqExp> "!=" <rel_exp: RelExp> => EqExp::CompoundEqExp(Box::new(eq_exp), rel_exp, EqOp::Ne)
}

RelExp: RelExp = {
    <add_exp: AddExp> => RelExp::AddExp(<>),
    <rel_exp: RelExp> "<" <add_exp: AddExp> => RelExp::CompoundRelExp(Box::new(rel_exp), add_exp, RelOp::Lt),
    <rel_exp: RelExp> ">" <add_exp: AddExp> => RelExp::CompoundRelExp(Box::new(rel_exp), add_exp, RelOp::Gt),
    <rel_exp: RelExp> "<=" <add_exp: AddExp> => RelExp::CompoundRelExp(Box::new(rel_exp), add_exp, RelOp::Le),
    <rel_exp: RelExp> ">=" <add_exp: AddExp> => RelExp::CompoundRelExp(Box::new(rel_exp), add_exp, RelOp::Ge)
}

AddExp: AddExp = {
    <mul_exp: MulExp> => AddExp::MulExp(<>),
    <add_exp: AddExp> "+" <mul_exp: MulExp> => AddExp::CompoundAddExp(Box::new(add_exp), mul_exp, AddOp::Plus),
    <add_exp: AddExp> "-" <mul_exp: MulExp> => AddExp::CompoundAddExp(Box::new(add_exp), mul_exp, AddOp::Minus)
}

MulExp: MulExp = {
    <unary_exp: UnaryExp> => MulExp::UnaryExp(<>),
    <mul_exp: MulExp> "*" <unary_exp: UnaryExp> => MulExp::CompoundMulExp(Box::new(mul_exp), unary_exp, MulOp::Mul),
    <mul_exp: MulExp> "/" <unary_exp: UnaryExp> => MulExp::CompoundMulExp(Box::new(mul_exp), unary_exp, MulOp::Div),
    <mul_exp: MulExp> "%" <unary_exp: UnaryExp> => MulExp::CompoundMulExp(Box::new(mul_exp), unary_exp, MulOp::Mod)
}

UnaryExp: UnaryExp = {
    <primary_exp: PrimaryExp> => UnaryExp::PrimaryExp(<>),
    <op: UnaryOp> <exp: UnaryExp> => UnaryExp::CompoundUnaryExp(op, Box::new(exp))
}

PrimaryExp: PrimaryExp = {
    "(" <exp: Exp> ")" => PrimaryExp::Exp(Box::new(<>)),
    <number: Number> => PrimaryExp::Number(<>),
    <l_val: LVal> => PrimaryExp::LVal(<>)
}

LVal: LVal = {
    <start: @L> <str: IDENT> <end: @R> => LVal::Ident(str, Span {start, end})
}

UnaryOp: UnaryOp = {
    "+" => UnaryOp::Plus,
    "-" => UnaryOp::Minus,
    "!" => UnaryOp::Not
}

Number: i32 = {
    <num: IntConst> => <>
};

IDENT: String = r"[_a-zA-Z][_a-zA-Z0-9]*" => <>.to_string();

IntConst: i32 = {
    r"[1-9][0-9]*" => str::parse(<>).unwrap(),
    r"0[0-7]*" => i32::from_str_radix(<>, 8).unwrap(),
    r"0[xX][0-9a-fA-F]+" => i32::from_str_radix(&<>[2..], 16).unwrap()
};